//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CyberLlamaConsumerSite.CRUDService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRUDService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        string Login(string strUserName, string strPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string strUserName, string strPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addEmployee", ReplyAction="http://tempuri.org/IService/addEmployeeResponse")]
        int addEmployee(string fName, string sName, string eMail, string phone, int type, string UserName, string password, string confirm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addEmployee", ReplyAction="http://tempuri.org/IService/addEmployeeResponse")]
        System.Threading.Tasks.Task<int> addEmployeeAsync(string fName, string sName, string eMail, string phone, int type, string UserName, string password, string confirm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addClient", ReplyAction="http://tempuri.org/IService/addClientResponse")]
        int addClient(string fName, string sName, string eMail, string address, string City, string Province, int ZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addClient", ReplyAction="http://tempuri.org/IService/addClientResponse")]
        System.Threading.Tasks.Task<int> addClientAsync(string fName, string sName, string eMail, string address, string City, string Province, int ZipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserPositions", ReplyAction="http://tempuri.org/IService/getUserPositionsResponse")]
        string[] getUserPositions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getUserPositions", ReplyAction="http://tempuri.org/IService/getUserPositionsResponse")]
        System.Threading.Tasks.Task<string[]> getUserPositionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : CyberLlamaConsumerSite.CRUDService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<CyberLlamaConsumerSite.CRUDService.IService>, CyberLlamaConsumerSite.CRUDService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string strUserName, string strPassword) {
            return base.Channel.Login(strUserName, strPassword);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string strUserName, string strPassword) {
            return base.Channel.LoginAsync(strUserName, strPassword);
        }
        
        public int addEmployee(string fName, string sName, string eMail, string phone, int type, string UserName, string password, string confirm) {
            return base.Channel.addEmployee(fName, sName, eMail, phone, type, UserName, password, confirm);
        }
        
        public System.Threading.Tasks.Task<int> addEmployeeAsync(string fName, string sName, string eMail, string phone, int type, string UserName, string password, string confirm) {
            return base.Channel.addEmployeeAsync(fName, sName, eMail, phone, type, UserName, password, confirm);
        }
        
        public int addClient(string fName, string sName, string eMail, string address, string City, string Province, int ZipCode) {
            return base.Channel.addClient(fName, sName, eMail, address, City, Province, ZipCode);
        }
        
        public System.Threading.Tasks.Task<int> addClientAsync(string fName, string sName, string eMail, string address, string City, string Province, int ZipCode) {
            return base.Channel.addClientAsync(fName, sName, eMail, address, City, Province, ZipCode);
        }
        
        public string[] getUserPositions() {
            return base.Channel.getUserPositions();
        }
        
        public System.Threading.Tasks.Task<string[]> getUserPositionsAsync() {
            return base.Channel.getUserPositionsAsync();
        }
    }
}
